"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_1 = require("../repository/user/auth");
const auth_2 = require("../services/user/auth");
const auth_3 = require("../controllers/user/auth");
const user_1 = require("../repository/user/user");
const user_2 = require("../services/user/user");
const user_3 = require("../controllers/user/user");
const multerConfig_1 = require("../config/multerConfig");
const booking_1 = require("../repository/user/booking");
const booking_2 = require("../services/user/booking");
const booking_3 = require("../controllers/user/booking");
const accessToken_1 = __importDefault(require("../helper/accessToken"));
const route = (0, express_1.Router)();
const AuthRepositoryInstance = new auth_1.AuthRepository();
const AuthServiceInstance = new auth_2.AuthService(AuthRepositoryInstance);
const AuthControllerInstance = new auth_3.AuthController(AuthServiceInstance);
const UserRepositoryInstance = new user_1.UserRepository();
const UserServiceInstance = new user_2.UserService(UserRepositoryInstance);
const UserControllerInstance = new user_3.UserController(UserServiceInstance);
const BookingRepositoryInstance = new booking_1.BookingRepository();
const BookingServiceInstance = new booking_2.BookingService(BookingRepositoryInstance);
const BookingControllerInstance = new booking_3.BookingController(BookingServiceInstance);
route.post("/signUp", AuthControllerInstance.createUser.bind(AuthControllerInstance));
route.post("/sendOtp", AuthControllerInstance.sendOtp.bind(AuthControllerInstance));
route.post("/resendOtp", AuthControllerInstance.resendOtp.bind(AuthControllerInstance));
route.post("/auth/google", AuthControllerInstance.handleGoogleLogin.bind(AuthControllerInstance));
route.post("/forgot-password/sendOtp", AuthControllerInstance.sendForgotPasswordOtp.bind(AuthControllerInstance));
route.post("/forgot-password/verifyOtp", AuthControllerInstance.verifyForgotPasswordOtp.bind(AuthControllerInstance));
route.post("/forgot-password/reset", AuthControllerInstance.resetPassword.bind(AuthControllerInstance));
route.get("/services", UserControllerInstance.getServices.bind(UserControllerInstance));
route.post("/login", AuthControllerInstance.loginUser.bind(AuthControllerInstance));
route.use((0, accessToken_1.default)(["user"]));
route.get("/doctors", UserControllerInstance.getDoctors.bind(UserControllerInstance));
route.get("/doctorDetails/:id", UserControllerInstance.getDoctorDetails.bind(UserControllerInstance));
route.get("/profile/:id", UserControllerInstance.getUserProfile.bind(UserControllerInstance));
route.patch("/editProfile/:id", multerConfig_1.upload.single("image"), UserControllerInstance.editUserProfile.bind(UserControllerInstance));
route.patch("/changePassword/:id", UserControllerInstance.changePassword.bind(UserControllerInstance));
route.get("/schedule/:id", UserControllerInstance.getAvailableSlots.bind(UserControllerInstance));
//chat routes
route.post("/chatImgUploads/:id", multerConfig_1.upload.single("image"), UserControllerInstance.chatImageUploads.bind(UserControllerInstance));
route.get("/appointment-doctors/:id", UserControllerInstance.getAppointmentDoctors.bind(UserControllerInstance));
//
route.post("/logout", AuthControllerInstance.logoutUser.bind(AuthControllerInstance));
route.get("/coupons", BookingControllerInstance.getCoupons.bind(BookingControllerInstance));
route.delete("/coupons/:id/delete", BookingControllerInstance.delCoupons.bind(BookingControllerInstance));
route.post("/bookings", BookingControllerInstance.bookAppointment.bind(BookingControllerInstance));
route.post("/verifyBooking", BookingControllerInstance.verifyBooking.bind(BookingControllerInstance));
route.post("/retryPayment/:bookingId", BookingControllerInstance.retryPayment.bind(BookingControllerInstance));
route.post("/bookings/wallet", BookingControllerInstance.bookAppointmentUsingWallet.bind(BookingControllerInstance));
route.get("/appointments/:id", BookingControllerInstance.getPatientAppointments.bind(BookingControllerInstance));
route.patch("/appointments/:id/medical-records", BookingControllerInstance.addMedicalRecord.bind(BookingControllerInstance));
route.patch("/appointments/:id/cancel", BookingControllerInstance.cancelAppointment.bind(BookingControllerInstance));
route.get("/appointments/doctor/:id", BookingControllerInstance.getDoctorAppointments.bind(BookingControllerInstance));
route.patch("/appointments/:id/review", BookingControllerInstance.addReviewForDoctor.bind(BookingControllerInstance));
exports.default = route;
